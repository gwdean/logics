// This is an adaptation of the HTML rendering
// program found in Haverbeke's Eloquent JavaScript

* Description of the Code
** Rules
1. Paragraphs are separated by blank lines
2. A paragraph that starts with a % symbol is a header. 
   The more %% symbols, the smaller the header.
3. Inside paragraphs, pieces of text can be emphasized by putting them *between asterisks*
4. Footnotes are written {between braces}.
** Program Design of HTML Generating Program
1. Split the file into paragraphs by cutting it at every empty line.
2. Remove the % characters from header paragraphs and mark them as headers.
3. Process the text of the paragraphs themselves, splitting them into normal/emphasized/footnotes
4. Move all footnotes to the bottom of the document, leaving numbers in their place.
5. Wrap each piece into the correct HTML tags
6. Combine everything into a single HTML document

note: This approach does not allow footnotes inside emphasized text, or vice versa.
      A challenge would be to add support for such "nested markup".
* Sample Text

% The Book of Programming

%% The Two Aspects

Below the surface...

When the creators...

%% Short Sayings

When a student {needs a footnote}.

Another student *is between asterisks*.
* Code
** renderFile
// renderFile makes it all happen

function renderFile(file, title) {
    var paragraphs = map(processParagraph, file.split("\n\n"));
    var footnotes = map(renderFootnote, extractFootnotes(paragraphs));
    var body = map(renderParagraph, paragraphs).concat(footnotes);
    return renderHTML(htmlDoc(title, body));
}

** tag
function tag(name, content, attributes) {
    return {name: name, attributes: attributes, content: content};
}

** link
function link(target, text) {
    return tag("a", [text], {href: target});
}

** paragraphs
var paragraphs = LAUGHTER.split("\n\n");
paragraph.length;

** processParagraph
function processParagraph(paragraph) {
    var header = 0;
    while (paragraph.charAt(header) == "%")
	header++;
    if (header > 0)
	return {type: "h" + header, content: paragraph.slice(header + 1)};
    else
	return {type: "p", content: paragraph};
}

processParagraph(paragraphs[0]);

map(processParagraph, LAUGHTER.split("\n\n"));

** split
// split() from 84. This is not functional, but it is more efficient

function split() {
    var pos = 0, fragments = [];
    while (pos < text.length) {
	if (text.charAt(pos) == "*") {
	    var end = findClosing("*", pos + 1);
	    fragments.push({type: "emphasized", content: text.slice(pos + 1, end)});
	    pos = end + 1;
	}
	else if (text.charAt(pos) == "{") {
	    var end = findClosing("}", pos + 1);
	    fragments.push({type: "footnote", content: text.slice(pos + 1, end)});
	    pos = end + 1;
	}
	else {
	    var end = findOpeningOrEnd(pos);
	    fragments.push({type: "normal", content: text.slice(pos, end)});
	    pos = end;
	}
    }
    return fragments;
}

** extractFootnotes
// Moving the Footnotes

function extractFootnotes(paragraphs) {
    var footnotes = [];
    var currentNote = 0;

    function replaceFootnote(fragment) {
	if (fragment.type == "footnote") {
	    currentNote++;
	    footnotes.push(fragment);
	    fragment.number = currentNote;
	    return {type: "reference", number: currentNote};
	}
	else {
	    return fragment;
	}
    }
    
    forEach(paragraphs, function(paragraph) {
	paragraph.content = map(replaceFootnote, paragraph.content);
    });

    return footnotes;
}


** htmlDoc
function htmlDoc(title, bodyContent) {
  return tag("html", [tag("head", [tag("title", [title])]),
                      tag("body", bodyContent)]);
}

** escapeHTML
function escapeHTML(text) {
  var replacements = [[/&/g, "&amp;"], [/"/g, "&quot;"],
                      [/</g, "&lt;"], [/>/g, "&gt;"]];
  forEach(replacements, function(replace) {
    text = text.replace(replace[0], replace[1]);
  });
  return text;
}

** forEach
function forEach(array, action) {
  for (var i = 0;  i < array.length; i++)
    action(array[i]);
}

** sum
function sum(numbers) {
  var total = 0;
  forEach(numbers, function (number) {
    total += number;
  });
  return total;
}

** negate
function negate(func) {
  return function() {
    return !func.apply(null, arguments);
  };
}

** reduce
function reduce(combine, base, array) {
  forEach(array, function(element) {
    base = combine(base, element);
  });
  return base;
}

function add(a, b) {
  return a + b;
}

function sum(numbers)
  return reduce(add, 0, numbers);
}

function countZeroes(array) {
  function counter(total, element) {
    return total + (element === 0 ? 1 : 0);
  }
  return reduce(counter, 0, array);
}

** recluseFile
function recluseFile() {
  return "% The Book of Programming\n\n%%The Two Aspects\n\n";
}

** renderParagraph
function renderParagraph(paragraph) {
  return tag(paragraph.type, map(renderFragment, paragraph.content));
}

** renderFragment
function renderFragment(fragment) {
  if (fragment.type == "reference")
    return footnote(fragment.number);
  else if (fragment.type == "emphasized")
    return tag("em", [fragment.content]);
  else if (fragment.type == "normal")
    return fragment.content;
}
** map
function map(func, array) {
  var result = [];
  forEach(array, function (element) {
    result.push(func(element));
  });
  return result;
}
* Architecture
Running our text editor involves the following command:

renderFile(RECLUSEFILE, "The Book of Programming"));

In the online version, this is slightly different:

viewHTML(renderFile(recluseFile(), "The Book of Programming"));

I think the online version is slightly better, and to make
sure it works, we need to figure out how all these functions
relate to each other. Before that, we should identify how the
recluseFile() function works, and where it is located.

Found it. It is located in a file called fp.js under
JavaScript/js/chapter/. Apparently we need the viewHTML
file as well. 

(MC Ren) -> An HTML Renderer
--------------------------
The key to understanding (MC Ren) is to understand the following
program:

function renderFile(file, title) {
  var paragraphs = map(processParagraph, file.split("\n\n"));
  var footnotes = map(renderFootnote, extractFootnotes(paragraphs));
  var body = map(renderParagraph, paragraphs).concat(footnotes);
  return renderHTML(htmlDoc(title, body));
}

viewHTML(renderFile(recluseFile(), "The Book of Programming"));

The data associated with (MC Ren) is the Text file (here
given as a function that returns a string) and the title
of the document. 

Figuring out "renderFile" -> A Playground
------------------------------------------
Following Dirac's observation about playing around with equations,
this is what I am going to do with the "renderFile" function here..
play around with it until it is stuck in my head.

renderFile -> File Title
  paragraphs = map processParagraph File.split
  footnotes  = map renderFootnote extractFootnotes(paragraphs)
  body       = map renderParagraph paragraphs concat footnotes
  return renderHTML(htmlDoc(Title,body)

Map takes a function and an array, and returns an array.

So paragraphs is an an array.
So footnotes is an array.
So body is an array.

htmlDoc takes a title and bodyContent and puts all the proper
tags around it. 

(...to be continued...)
